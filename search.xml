<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git的初识和进阶</title>
      <link href="/2022/08/09/git/"/>
      <url>/2022/08/09/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="1-1Git"><a href="#1-1Git" class="headerlink" title="1.1Git"></a>1.1Git</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.Git是一个版本管理控制系统（缩写VCS），它可以在任何时间点，</span><br><span class="line">2.将文档的状态作为更新记录保存起来，也可以在任何时间点，</span><br><span class="line">3.将更新记录恢复回来。</span><br></pre></td></tr></table></figure><h2 id="1-2查看Git的版本"><a href="#1-2查看Git的版本" class="headerlink" title="1.2查看Git的版本"></a>1.2查看Git的版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --verson</span><br></pre></td></tr></table></figure><h2 id="1-3Git基本工作流程"><a href="#1-3Git基本工作流程" class="headerlink" title="1.3Git基本工作流程"></a>1.3Git基本工作流程</h2><table><thead><tr><th align="left">git仓库</th><th align="left">暂存区</th><th align="left">工作目录</th></tr></thead><tbody><tr><td align="left">用于存放提交记录</td><td align="left">临时存放被修改文件</td><td align="left">被Git管理的项目目录</td></tr></tbody></table><h2 id="1-4-Git使用前配置"><a href="#1-4-Git使用前配置" class="headerlink" title="1.4 Git使用前配置"></a>1.4 Git使用前配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提</span><br><span class="line">交时需要用到。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 配置提交人姓名：git config --global user.name “提交人姓名” # (对当前系统用户有效)</span><br><span class="line">2. 配置提交人姓名：git config --global user.email  “提交人邮箱” # (对当前系统用户有效)</span><br><span class="line">作用：识别开发人员，与登良github的账户无关</span><br><span class="line">3. 查看git配置信息：git config --list</span><br><span class="line"></span><br><span class="line">注意</span><br><span class="line">1.如果要对配置信息进行修改，重复上述命令即可。</span><br><span class="line">2. 配置只需要执行一次。</span><br></pre></td></tr></table></figure><h2 id="1-5-常用提交步骤"><a href="#1-5-常用提交步骤" class="headerlink" title="1.5 常用提交步骤"></a>1.5 常用提交步骤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1 git init  # 初始化git仓库</span><br><span class="line"></span><br><span class="line">2 git status  # 查看文件状态</span><br><span class="line"></span><br><span class="line">3 git add 文件列表 # 追踪文件</span><br><span class="line"></span><br><span class="line">4 git commit -m  “提交信息”  # 向仓库中提交代码(全部文件)</span><br><span class="line">vs： git commit -m &quot;提交信息&quot;  文件  # 提交某个文件</span><br><span class="line"></span><br><span class="line">5 git log # 显示所有提交记录</span><br><span class="line">vs： git log --pretty=oneline   # 一行显示版本信息</span><br><span class="line">补充：</span><br><span class="line">git log lfa380b5O2a0Ob82bfc8d84c5ab5el5b8fbf7dac # 会显示所有关于这个id以及之前的修改记录</span><br><span class="line">git log lfa380b5O2a0Ob82bfc8d84c5ab5el5b8fbf7dac -1 # 加上-1参数表示我们只想看到一行记录</span><br><span class="line">而如果想要查看这条提交记录具体修改了什么内容，可以在命令中加入p参数，命令如下:</span><br><span class="line">git log Ifa380b502a00b82bfc8d84c5ab5el5b8fbf7dac -1 -p</span><br><span class="line"></span><br><span class="line">6 git reset  --hard 版本id  # 回退版本</span><br><span class="line"></span><br><span class="line">7 git reflog   # 查看所有版本信息</span><br><span class="line"></span><br><span class="line">8 git diff  # 表示未使用add命令时的修改</span><br><span class="line"></span><br><span class="line">这样可以查看到所有文件的更改内容，</span><br><span class="line">如果你只想查看MainActivity.java这个文件的更改内容，</span><br><span class="line">可以使用如下命令：</span><br><span class="line">git diff app/src/main/java/com/example/providertest/MainActivity.java</span><br><span class="line"></span><br><span class="line">vs：git log 表示最近的改变，git reflog可以看到所有的改变</span><br><span class="line">如果文件未被跟踪,即没有使用git add这个命令时,文</span><br><span class="line">件为红色,如果使用这个命令,则文件变为绿色. </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Administrator@E3J6CI1HV76DS4U MINGW32 /d/360MoveData/Users/Administrator/Desktop/test</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in D:/360MoveData/Users/Administrator/Desktop/test/.git/</span><br><span class="line"></span><br><span class="line">Administrator@E3J6CI1HV76DS4U MINGW32 /d/360MoveData/Users/Administrator/Desktop/test (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        index.html</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line"></span><br><span class="line">Administrator@E3J6CI1HV76DS4U MINGW32 /d/360MoveData/Users/Administrator/Desktop/test (master)</span><br><span class="line">$ git add index.html</span><br><span class="line"></span><br><span class="line">Administrator@E3J6CI1HV76DS4U MINGW32 /d/360MoveData/Users/Administrator/Desktop/test (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   index.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Administrator@E3J6CI1HV76DS4U MINGW32 /d/360MoveData/Users/Administrator/Desktop/test (master)</span><br><span class="line">$ git commit -m 第一次提交</span><br><span class="line">[master (root-commit) 23db606] 第一次提交</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 index.html</span><br></pre></td></tr></table></figure><h2 id="1-6-撤销"><a href="#1-6-撤销" class="headerlink" title="1.6 撤销"></a>1.6 撤销</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1 git checkout 文件</span><br><span class="line">不过这种撤销方式只适用于那些还没有执行过add命令</span><br><span class="line">的文件,如果某个文件已经被添加过了，这种方式就无</span><br><span class="line">法撤销其更改的内容.</span><br><span class="line">这种情况我们应该先对其取消添加，然后才可以撤回提交。</span><br><span class="line">取消添加使用的是reset命令，用法如下所示：</span><br><span class="line">git reset HEAD app/src/main/java/com/example/providertest/MainActivity.java</span><br><span class="line">然后再运行一遍git status命令，你就会发现MainActivity.java这个文件重新变回了未添加状态，此时就可以使用checkout命令来将修改的内容进行撤销了。</span><br><span class="line"></span><br><span class="line">2 用暂存区中的文件覆盖工作目录中的文件： git checkout 文件</span><br><span class="line">应用场景:如果开发过程中不满意当前的内容,想要后悔药,那么可以</span><br><span class="line">使用这个命令从暂存区取相应的文件来恢复,使用后文件的状态依然</span><br><span class="line">为绿色.</span><br><span class="line"></span><br><span class="line">3 将文件从暂存区中删除： git rm --cached 文件</span><br><span class="line">应用场景:开发过程中,不是每个文件都是有必要交给git管</span><br><span class="line">理的,使用这个命令可以从暂存区删除没用的文件,不交</span><br><span class="line">给git管理,此时文件在工作目录依然存在,只是没在</span><br><span class="line">暂存区而已.</span><br><span class="line"></span><br><span class="line">4 将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工</span><br><span class="line">作目录：git reset --hard commitID</span><br><span class="line">应用场景:开发过程中,如果想要利用某次记录覆盖暂存区和工</span><br><span class="line">作目录,则可以使用 上面那个命令.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-7-Git进阶"><a href="#1-7-Git进阶" class="headerlink" title="1.7 Git进阶"></a>1.7 Git进阶</h2><h3 id="1-7-1-分支"><a href="#1-7-1-分支" class="headerlink" title="1.7.1 分支"></a>1.7.1 分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">为了便于理解，大家暂时可以认为分支就是当前工作目</span><br><span class="line">录中代码的一份副本。</span><br><span class="line">使用分支，可以让我们从开发主线上分离</span><br><span class="line">出来，以免影响开发主线。</span><br></pre></td></tr></table></figure><h3 id="1-7-2-分支细分"><a href="#1-7-2-分支细分" class="headerlink" title="1.7.2 分支细分"></a>1.7.2 分支细分</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">主分支（master）：第一次向 git 仓库中提交更新记录时自动</span><br><span class="line">产生的一个分支。</span><br><span class="line">开发分支（develop）：作为开发的分支，基于 master 分支创建。</span><br><span class="line">功能分支（feature）：作为开发具体功能的分支，基于开发分支创建</span><br><span class="line">功能分支 -&gt; 开发分支 -&gt; 主分支</span><br><span class="line">解析:实际开发中,主分支一般来发布源码之类,要保持稳定,所以</span><br><span class="line">就出现了开发分支,当开发分支弄好后在合并到主分支.</span><br><span class="line">功能分支是作为开发具体功能的分支,为了保持开发分支</span><br><span class="line">的稳定,当功能分支弄好后在合并到开发分支.所以路线就是</span><br><span class="line">功能分支 -&gt; 开发分支 -&gt; 主分支</span><br></pre></td></tr></table></figure><h3 id="1-7-3-分支命令"><a href="#1-7-3-分支命令" class="headerlink" title="1.7.3 分支命令"></a>1.7.3 分支命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git branch  # 查看分支</span><br><span class="line"></span><br><span class="line">git branch 分支名称 # 创建分支</span><br><span class="line"></span><br><span class="line">git checkout 分支名称  # 切换分支</span><br><span class="line">注意:在切换分支的时候一定要保证当前的内容处于提</span><br><span class="line">交状态,即有使用git commit这个命令,否则切换到其</span><br><span class="line">他分支的时候会把切换前的分支内容带过去,这不是我们想要的</span><br><span class="line"></span><br><span class="line">git merge 来源分支 # 合并分支</span><br><span class="line"></span><br><span class="line">git branch -d 分支名称` # 删除分支（分支被合并后才允许删除）（-D 强制删除）</span><br><span class="line">注意:如果某分支没有合并，则该分支不可以直接被删除，解决办法就是把小d改为大D即可。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-7-4-暂时保存更改"><a href="#1-7-4-暂时保存更改" class="headerlink" title="1.7.4 暂时保存更改"></a>1.7.4 暂时保存更改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在git中，可以暂时提取分支上所有的改动并存储，让开发人</span><br><span class="line">员得到一个干净的工作副本，临时转向其他工作。</span><br><span class="line">使用场景：分支临时切换</span><br><span class="line">存储临时改动：git stash</span><br><span class="line">恢复改动：git stash pop</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">应用场景(分支临时切换);开发过程中，如果老板说</span><br><span class="line">以前的内容存在bug，那么你得切换分支去修改，</span><br><span class="line">但你当前的分支尚未完成，不想提交上去.即不要</span><br><span class="line">git commit这个命令的需求，但是又不想把切换前</span><br><span class="line">的分支内容带过去，此时可以利用git stash(存储</span><br><span class="line">临时改动)这个命令，这个命令的作用就是把你当</span><br><span class="line">前分支的内容剪切到剪贴板上，然后就可以切换</span><br><span class="line">分支了，虽然没有git commit这个命令，但状态已</span><br><span class="line">处于工作清空状态（即暂存区跟工作目录没有内容了）。</span><br><span class="line">当处理好bug之后切换到原来的分支，使用</span><br><span class="line">git stash pop(恢复改动)这个命令从剪贴板复制过</span><br><span class="line">来，此时又恢复之前的状态了。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-8-github"><a href="#1-8-github" class="headerlink" title="1.8 github"></a>1.8 github</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在版本控制系统中，大约90%的操作都是在本地</span><br><span class="line">仓库中进行的：暂存，提交，查看状态或者历史</span><br><span class="line">记录等等。除此之外，如果仅仅只有你一个人在</span><br><span class="line">这个项目里工作，你永远没有机会需要设置一个远程仓库。</span><br><span class="line"></span><br><span class="line">只有当你需要和你的开发团队共享数据时，设置一</span><br><span class="line">个远程仓库才有意义。你可以把它想象成一个</span><br><span class="line">“文件管理服务器”，利用这个服务器可以与开发</span><br><span class="line">团队的其他成员进行数据交换。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-8-1-github解释名词"><a href="#1-8-1-github解释名词" class="headerlink" title="1.8.1 github解释名词"></a>1.8.1 github解释名词</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">仓库(Repository)</span><br><span class="line">有多少个开源项目，就有多少个仓库</span><br><span class="line"></span><br><span class="line">收藏(Star)</span><br><span class="line">即收藏人数</span><br><span class="line"></span><br><span class="line">fork(克隆)</span><br><span class="line">复制项目到自己的仓库</span><br><span class="line"></span><br><span class="line">pull request</span><br><span class="line">请求把改变的内容更改到被克隆的那个远程仓库中</span><br><span class="line"></span><br><span class="line">watch(关注)</span><br><span class="line">通知你关注项目的改变</span><br><span class="line"></span><br><span class="line">issue(事务卡片)</span><br><span class="line">发现bug，把bug通知上去，讨论协商</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-8-2-多人协作开发流程"><a href="#1-8-2-多人协作开发流程" class="headerlink" title="1.8.2 多人协作开发流程"></a>1.8.2 多人协作开发流程</h3><p><img src="/img/git1.png" alt="同队开发"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A在自己的计算机中创建本地仓库</span><br><span class="line">A在github中创建远程仓库</span><br><span class="line">A将本地仓库推送到远程仓库</span><br><span class="line">B克隆远程仓库到本地进行开发</span><br><span class="line">B将本地仓库中开发的内容推送到远程仓库</span><br><span class="line">A将远程仓库中的最新内容拉去到本地</span><br></pre></td></tr></table></figure><p><img src="/img/git2.png" alt="同队开发"></p><h3 id="1-8-2-1-合作流程"><a href="#1-8-2-1-合作流程" class="headerlink" title="1.8.2.1 合作流程"></a>1.8.2.1 合作流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">同队开发</span><br><span class="line">1.首先A方创建远程仓库，将本地仓库推送到远程仓库</span><br><span class="line">（我们本地仓库的版本必须大于远程仓库的版本，否则push失败。），</span><br><span class="line">采用git push 远程仓库地址 分支名称。</span><br><span class="line">git push https://github.com/yxjgithub-png/git-demo.git master # 将master分支推送到远程仓库。但是这里地址麻烦，可以采用步骤2添加别名</span><br><span class="line"></span><br><span class="line">2. git remote add 远程仓库地址别名(可以自定义,一般为origin)  远程仓库地址 # (查看当前远程地址的别名</span><br><span class="line">git remote -v )</span><br><span class="line">git remote add origin https://github.com/yxjgithub-png/git-demo.git # 如果不想使用地址形式，可以采用别名来代替。如果想直接使用git push，则可以采用步骤3</span><br><span class="line"></span><br><span class="line">3. git push -u 远程仓库地址别名 分支名称</span><br><span class="line">git push origin master  # 推送远程分支</span><br><span class="line">git push -u origin master # -u 记住推送地址及分支，下次推送只需要输入git push即可.B方想加入团队进行开发，则需要步骤4.</span><br><span class="line">解析：第一次输入需要用户名和密码，以后不用，window系统会帮助我们记住用户名和密码，在那个控制面板的凭据管理器中。</span><br><span class="line"></span><br><span class="line">4.git clone 仓库地址 </span><br><span class="line">git clone 远程仓库地。B方想推送自己修改的内容，则需要步骤5</span><br><span class="line">效果:1.下载内容到本地 2.克隆别人远程仓库的别名 3.初始化仓库</span><br><span class="line"></span><br><span class="line">当我们需要clone后想把内容推送到别人的远程仓库时，不可以直接推送，而是需要别人在相应的远程仓库的settings里面操作，填写邀请队友的账号。当我们用git clone的时候，不仅将对方的东西复制过来，而且连对方远程仓库的别名也复制过来。</span><br><span class="line">5. git push 远程仓库地址 推送的分支</span><br><span class="line">git push origin master  # B方想把内容推送给A方，然后A方可以采用步骤6进行版本的更新</span><br><span class="line"></span><br><span class="line">git push &lt;远程主机名&gt;  &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line">注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6.git pull</span><br><span class="line">拉取远程仓库中最新的版本：git pull 远程仓库地址 远程地址分支名称</span><br><span class="line">git pull origin master # 拉取origin主机的master分支，与本地当前分支合并</span><br><span class="line"></span><br><span class="line">比如，要取回origin主机的next分支，与本地的master分支合并，需要写成下面这样   git pull origin next:master</span><br><span class="line">如果远程分支(next)要与当前分支合并，则冒号后面的部分可以省略。上面命令可以简写为：git pull origin next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git clone 跟 git pull的区别</span><br><span class="line">git clone是在没有本地仓库的基础上clone别人的东西，而git pull则是在有本地仓库的基础上拉取代码到本地。git clone</span><br><span class="line">只是第一次参与开发时用，以后都是用git pull命令</span><br><span class="line"></span><br><span class="line">解决冲突</span><br><span class="line">在多人同时开发一个项目时，如果两个人修改了同一个文件的同一个地方，就会发生冲突。冲突需要人为解决。</span><br><span class="line">先把远程仓库pull下来，然后删除冲突的标记，再做相应的修改即可。然后git add，git commit，git push上去。</span><br><span class="line"></span><br><span class="line">跨团队协作</span><br><span class="line">1. 程序员 C fork仓库：把对方远程仓库的内容复制到自己的远程仓库</span><br><span class="line">2. 程序员 C 将远程仓库克隆在本地进行修改</span><br><span class="line">3. 程序员 C 将仓库推送到自己的远程仓库</span><br><span class="line">4. 程序员 C如果想要把修改内容发给对方，则需要点击pull request命令</span><br><span class="line">5. 然后等待原远程仓库作者审核</span><br><span class="line">6. 原远程仓库作者合并代码即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-8-3ssh免登陆"><a href="#1-8-3ssh免登陆" class="headerlink" title="1.8.3ssh免登陆"></a>1.8.3ssh免登陆</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">生成秘钥：ssh-keygen</span><br><span class="line">秘钥存储目录：C:\Users\用户\\.ssh</span><br><span class="line">公钥名称：id_rsa.pub</span><br><span class="line">私钥名称：id_rsa</span><br><span class="line">解析：使用ssh-keygen命令，然后生成秘钥，私钥</span><br><span class="line">保存在自己的电脑中，公钥发布在自己的远程仓库</span><br><span class="line">中（在settings中找到设置ssh的地方，将公钥的</span><br><span class="line">内容复制到那里），然后复制相应仓库的ssh地址，</span><br><span class="line">然后正常操作就可以实现免密码登录。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-8-4GIT忽略清单"><a href="#1-8-4GIT忽略清单" class="headerlink" title="1.8.4GIT忽略清单"></a>1.8.4GIT忽略清单</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将不需要被git管理的文件名字添加到.gitignore中，</span><br><span class="line">在执行git命令的时候，git就会忽略这些文件。</span><br><span class="line">将工作目录中的文件全部添加到暂存区：git add .</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-8-5-bug"><a href="#1-8-5-bug" class="headerlink" title="1.8.5 bug"></a>1.8.5 bug</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">idea提交项目到github</span><br><span class="line">提交到远程库错误:Push to origin/master was rejected</span><br><span class="line">解决方案：git pull origin(远程仓库的地址) master --allow-unrelated-histories</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-8-6-Github搜索技巧"><a href="#1-8-6-Github搜索技巧" class="headerlink" title="1.8.6 Github搜索技巧"></a>1.8.6 Github搜索技巧</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">in:name Vue # 搜索项目名包含Vue的项目</span><br><span class="line">in:name Vue  stars:&gt;5000 # 搜索Vue项目的star数大于5000 </span><br><span class="line">in:name Vue stars:&gt;5000 forks:&gt;5000 # 搜索Vue项目的star数大于5000 并且 forks:&gt;5000</span><br><span class="line">in:readme Vue # 搜索README.md里面包含Vue的项目</span><br><span class="line">in:descrition Vue # 搜索项目描述包含Vue的项目</span><br><span class="line">language:java  # 搜索语言为java的项目</span><br><span class="line">pushed:&gt;2020-01-02 # 搜索项目最后更新时间大于2020-01-02的项目</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react事件处理</title>
      <link href="/2022/07/12/react%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
      <url>/2022/07/12/react%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>-&gt; React 事件的命名采用小驼峰式（camelCase），而不是纯小写。<br>-&gt; 使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。<br>例如，传统的 HTML：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;activateLasers()&quot;</span>&gt;</span><br><span class="line">  <span class="title class_">Activate</span> <span class="title class_">Lasers</span></span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>在 React 中略微不同：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;activateLasers&#125;&gt;</span><br><span class="line">  <span class="title class_">Activate</span> <span class="title class_">Lasers</span></span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>在 <code>React</code> 中另一个不同点是你不能通过返回 <code>false</code> 的方式阻止默认行为。你必须显式的使用 <code>preventDefault</code> 。例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ActionLink</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The link was clicked.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Click me</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，e 是一个合成事件。React 根据 W3C 规范来定义这些合成事件，所以你不需要担心跨浏览器的兼容性问题。</p><h2 id="向事件处理程序传递参数"><a href="#向事件处理程序传递参数" class="headerlink" title="向事件处理程序传递参数"></a>向事件处理程序传递参数</h2><p>在循环中，通常我们会为事件处理函数传递额外的参数。例如，若 id 是你要删除那一行的 ID，以下两种方式都可以向事件处理函数传递参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">deleteRow</span>(id, e)&#125;&gt;<span class="title class_">Delete</span> <span class="title class_">Row</span>&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.deleteRow.bind(this,</span> <span class="attr">id</span>)&#125;&gt;</span>Delete Row<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>上述两种方式是等价的，分别通过<code>箭头函数</code>和 <code>Function.prototype.bind</code> 来实现。<br>在这两种情况下，React 的事件对象 <code>e </code>会被作为第二个参数传递。如果通过箭头函数的方式，事件对象必须显式的进行传递，而通过 <code>bind</code> 的方式，事件对象以及更多的参数将会被隐式的进行传递。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react入门</title>
      <link href="/2022/07/11/react/"/>
      <url>/2022/07/11/react/</url>
      
        <content type="html"><![CDATA[<h3 id="Create-React-App"><a href="#Create-React-App" class="headerlink" title="Create React App"></a>Create React App</h3><p>Create React App 是一个用于学习 React 的舒适环境，也是用 React 创建新的单页应用的最佳方式。<br>它会配置你的开发环境，以便使你能够使用最新的 JavaScript 特性，提供良好的开发体验，并为生产环境优化你的应用程序。你需要在你的机器上安装*** Node &gt;&#x3D; 8.10 和 npm &gt;&#x3D; 5.6***。要创建项目，请执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>最简易的React实例瑞如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="jsx简介"><a href="#jsx简介" class="headerlink" title="jsx简介"></a>jsx简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const element = &lt;h1&gt;Hello, world!&lt;/h1&gt;;</span><br></pre></td></tr></table></figure><p>这个有趣的标签语法既不是字符串也不是 HTML。<br>它被称为 JSX，是一个 JavaScript 的语法扩展。我们建议在 React 中配合使用 JSX，JSX 可以很好地描述 UI 应该呈现出它应有交互的本质形式。JSX 可能会使人联想到模版语言，但它具有 JavaScript 的全部功能。<br>JSX 可以生成 React “元素”。</p><p>在 JSX 语法中，你可以在大括号内放置任何有效的 JavaScript 表达式。例如，<code>2 + 2</code>，<code>user.firstName</code> 或 <code>formatName(user)</code> 都是有效的 JavaScript 表达式。<br>在下面的示例中，我们将调用 JavaScript 函数 <code>formatName(user) </code>的结果，并将结果嵌入到 <code>&lt;h1&gt;</code> 元素中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatName</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> user.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + user.<span class="property">lastName</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Harper&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Perez&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello, &#123;formatName(user)&#125;!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  element,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="jsx表示对象"><a href="#jsx表示对象" class="headerlink" title="jsx表示对象"></a>jsx表示对象</h2><p>Babel 会把 JSX 转译成一个名为<code> React.createElement()</code> 函数调用。</p><p>以下两种示例代码完全等效：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;greeting&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello, world!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  &#123;<span class="attr">className</span>: <span class="string">&#x27;greeting&#x27;</span>&#125;,</span><br><span class="line">  <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>React.createElement()</code> 会预先执行一些检查，以帮助你编写无错代码，但实际上它创建了一个这样的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：这是简化过的结构</span></span><br><span class="line"><span class="keyword">const</span> element = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">className</span>: <span class="string">&#x27;greeting&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react样式和遍历</title>
      <link href="/2022/07/11/react%E6%A0%B7%E5%BC%8F/"/>
      <url>/2022/07/11/react%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><pre><code>react样式写法    + class绑定单个属性值        =&gt; className=&#123; title &#125;    变量title:&#39;title&#39;    + dangerouslySetInnerHTML 解析并插入标签       + 插值中，加引号是字符串，没加引号的变量。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vdom = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      <span class="comment">// 1.class绑定单个值</span></span><br><span class="line">      <span class="comment">// var vdom = &lt;div className=&#123; title &#125;&gt;hello&lt;/div&gt;</span></span><br><span class="line">      <span class="comment">// 2.class绑定多个值</span></span><br><span class="line">      <span class="keyword">var</span> styles = [<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;bg&#x27;</span>]</span><br><span class="line">      <span class="comment">//   var vdom = &lt;div className=&#123; styles.join(&#x27; &#x27;) &#125;&gt;hello&lt;/div&gt;</span></span><br><span class="line">      <span class="comment">//   var vdom = &lt;div className=&#123;&#x27;title bg&#x27;&#125;&gt;hello&lt;/div&gt;</span></span><br><span class="line">      <span class="comment">//  3.三元</span></span><br><span class="line">      <span class="keyword">var</span> b = <span class="literal">false</span></span><br><span class="line">      <span class="comment">// var vdom = &lt;div className=&#123; b ? &#x27;title&#x27;:&#x27;&#x27; &#125;&gt;hello&lt;/div&gt;</span></span><br><span class="line">      <span class="comment">//  4.style行内样式</span></span><br><span class="line">      <span class="keyword">var</span> fon = <span class="string">&#x27;12px&#x27;</span></span><br><span class="line">      <span class="comment">// var vdom = &lt;div style=&#123;&#123;color:&#x27;red&#x27;,fontSize:fon&#125;&#125;&gt;hello&lt;/div&gt;</span></span><br><span class="line">      <span class="comment">// var s = &#123;color:&#x27;red&#x27;,fontSize:&#x27;12px&#x27;&#125;</span></span><br><span class="line">      <span class="comment">// var vdom = &lt;div style=&#123; s &#125;&gt;hello&lt;/div&gt;</span></span><br><span class="line">      <span class="comment">// dangerouslySetInnerHTML  react用来解析字符串，并识别标签  v-html</span></span><br><span class="line">      <span class="comment">// 了解下，容易被xss攻击</span></span><br><span class="line">      <span class="comment">// var vdom = &lt;div&gt;hello，&lt;p dangerouslySetInnerHTML=&#123;&#123;__html:&#x27;&lt;a href=&quot;http:www.baidu.com&quot;&gt;百度一下&lt;/a&gt;&#x27;&#125;&#125;&gt;&lt;/p&gt; &lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">        react 数组遍历</span></span><br><span class="line"><span class="comment">          + 回顾vue，v-for=&quot;(item,index) in arr&quot; :key=&quot;item.id&quot;</span></span><br><span class="line"><span class="comment">          + arr.map((item,index)=&gt;return &lt;li key=&#123;item.id&#125;&gt;&#123; item.name &#125;&lt;/li&gt;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;小红&#x27;</span>,<span class="string">&#x27;小黑&#x27;</span>]</span><br><span class="line">    <span class="keyword">var</span> vdom = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/*  注意：jsx中添加注释，需要包裹&#123;&#125;，数组有多少个元素，我们应该是有多个li标签 */&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">              arr.map((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                 return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;</span> <span class="attr">index</span> &#125;&gt;</span>&#123; item &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#125;)</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">          vdom,</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">         )</span><br></pre></td></tr></table></figure><h2 id="对象遍历"><a href="#对象遍历" class="headerlink" title="对象遍历"></a>对象遍历</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">          react 对象的遍历</span></span><br><span class="line"><span class="comment">           + 回顾vue，v-for=&quot;(val,key,index) in obj&quot;  :key=&quot;key&quot;</span></span><br><span class="line"><span class="comment">           + Object.keys(obj).map((item.index)=&gt;&#123;</span></span><br><span class="line"><span class="comment">               return &lt;li key=&#123; item &#125;&gt;属性：&#123; item &#125;，属性值：&#123; obj[item] &#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">           &#125;)</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">123</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">22</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> vdom = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;</span></span><br><span class="line"><span class="language-xml">                Object.keys(obj).map((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                   return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;</span> <span class="attr">item</span> &#125;&gt;</span>属性：&#123; item &#125;,属性值：&#123; obj[item] &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">            vdom,</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">           )</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react组件和渲染</title>
      <link href="/2022/07/11/react%E6%B8%B2%E6%9F%93%E5%92%8C%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/07/11/react%E6%B8%B2%E6%9F%93%E5%92%8C%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><h3 id="渲染为DOM节点"><a href="#渲染为DOM节点" class="headerlink" title="渲染为DOM节点"></a>渲染为DOM节点</h3><p>想要将一个 React 元素渲染到根 DOM 节点中，只需把它们一起传入 <code>ReactDOM.render()</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="更新已渲染的元素"><a href="#更新已渲染的元素" class="headerlink" title="更新已渲染的元素"></a>更新已渲染的元素</h3><p>React 元素是不可变对象。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。</p><p>根据我们已有的知识，更新 UI 唯一的方式是创建一个全新的元素，并将其传入 <code>ReactDOM.render()</code>。</p><p>下面有一个计时器的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;new Date().toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(element, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(tick, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>这个例子会在 setInterval() 回调函数，每秒都调用 <code>ReactDOM.render()</code>。</p><h2 id="React-只更新它需要更新的部分"><a href="#React-只更新它需要更新的部分" class="headerlink" title="React 只更新它需要更新的部分"></a>React 只更新它需要更新的部分</h2><p>React DOM 会将元素和它的子元素与它们之前的状态进行比较，并只会进行必要的更新来使 DOM 达到预期的状态。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="函数组件与-class-组件"><a href="#函数组件与-class-组件" class="headerlink" title="函数组件与 class 组件"></a>函数组件与 class 组件</h3><p>定义组件最简单的方式就是编写 JavaScript 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数是一个有效的 React 组件，因为它接收唯一带有数据的 “props”（代表属性）对象与并返回一个 React 元素。这类组件被称为“函数组件”，因为它本质上就是 JavaScript 函数。</p><p>你同时还可以使用 ES6 的 class 来定义组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述两个组件在 React 里是等效的。</p><h3 id="渲染组件"><a href="#渲染组件" class="headerlink" title="渲染组件"></a>渲染组件</h3><p>之前，我们遇到的 React 元素都只是 DOM 标签：</p><p><code>const element = &lt;div /&gt;;</code><br>不过，React 元素也可以是用户自定义的组件：</p><p><code>const element = &lt;Welcome name=&quot;Sara&quot; /&gt;</code><br>当 React 元素为用户自定义组件时，它会将 JSX 所接收的属性（attributes）以及子组件（children）转换为单个对象传递给组件，这个对象被称之为 “props”。</p><p>例如，这段代码会在页面上渲染 “Hello, Sara”：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  element,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>让我们来回顾一下这个例子中发生了什么：</p><p>1.我们调用 ReactDOM.render() 函数，并传入 <Welcome name="Sara" /> 作为参数。<br>2.React 调用 Welcome 组件，并将 {name: ‘Sara’} 作为 props 传入。<br>3.Welcome 组件将 <h1>Hello, Sara</h1> 元素作为返回值。<br>4.React DOM 将 DOM 高效地更新为 <h1>Hello, Sara</h1>。</p><p><em><strong>注意</strong></em>： 组件名称必须以大写字母开头。<br>React 会将以小写字母开头的组件视为原生 DOM 标签。例如，<div /> 代表 HTML 的 div 标签，而 <Welcome /> 则代表一个组件，并且需在作用域内使用 Welcome。</p><h3 id="提取组件"><a href="#提取组件" class="headerlink" title="提取组件"></a>提取组件</h3><p>例如，参考如下 Comment 组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Comment</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;UserInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;Avatar&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">src</span>=<span class="string">&#123;props.author.avatarUrl&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">alt</span>=<span class="string">&#123;props.author.name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;UserInfo-name&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;props.author.name&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment-text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.text&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment-date&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;formatDate(props.date)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该组件用于描述一个社交媒体网站上的评论功能，它接收 author（对象），text （字符串）以及 date（日期）作为 props。</p><p>该组件由于嵌套的关系，变得难以维护，且很难复用它的各个部分。因此，让我们从中提取一些组件出来。</p><p>首先，我们将提取 Avatar 组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Avatar</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;Avatar&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">src</span>=<span class="string">&#123;props.user.avatarUrl&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">alt</span>=<span class="string">&#123;props.user.name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们现在针对 Comment 做些微小调整：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Comment</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;UserInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">user</span>=<span class="string">&#123;props.author&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;UserInfo-name&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;props.author.name&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment-text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.text&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment-date&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;formatDate(props.date)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们将提取 UserInfo 组件，该组件在用户名旁渲染 Avatar 组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">UserInfo</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;UserInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">user</span>=<span class="string">&#123;props.user&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;UserInfo-name&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.user.name&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步简化 Comment 组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Comment</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">UserInfo</span> <span class="attr">user</span>=<span class="string">&#123;props.author&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment-text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.text&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Comment-date&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;formatDate(props.date)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最初看上去，提取组件可能是一件繁重的工作，但是，在大型应用中，构建可复用组件库是完全值得的。根据经验来看，如果 UI 中有一部分被多次使用（Button，Panel，Avatar），或者组件本身就足够复杂（App，FeedStory，Comment），那么它就是一个可复用组件的候选项。</p><h3 id="Props-的只读性"><a href="#Props-的只读性" class="headerlink" title="Props 的只读性"></a>Props 的只读性</h3><p>组件无论是使用函数声明还是通过 class 声明，都决不能修改自身的 <code>props</code>。来看下这个 <code>sum</code> 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相反，下面这个函数则不是纯函数，因为它更改了自己的入参：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">account, amount</span>) &#123;</span><br><span class="line">  account.<span class="property">total</span> -= amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React 非常灵活，但它也有一个严格的规则：<br><strong>所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。</strong></p><p>当然，应用程序的 UI 是动态的，并会伴随着时间的推移而变化。在下一章节中，我们将介绍一种新的概念，称之为 “state”。在不违反上述规则的情况下，state 允许 React 组件随用户操作、网络响应或者其他变化而动态更改输出内容。<br>下面例子就是Props传参例子<br><img src="/img/react_props.png" alt="代码详解"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VUE3传值</title>
      <link href="/2022/07/11/V3%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
      <url>/2022/07/11/V3%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="Props传值"><a href="#Props传值" class="headerlink" title="Props传值"></a>Props传值</h2><p>Props方式是Vue中最常见的一种父传子的一种方式<br>父组件代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;child-components :list=&quot;list&quot;&gt;&lt;/child-components&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input v-model=&quot;value&quot; type=&quot;text&quot; placeholder=&quot;请输入&quot;/&gt;</span><br><span class="line">    &lt;button @click=&quot;handleAdd&quot; type=&quot;button&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import ChildComponents from &#x27;./child.vue&#x27;</span><br><span class="line">const list = ref([&#x27;JavaScript&#x27;, &#x27;HTML&#x27;, &#x27;CSS&#x27;])</span><br><span class="line">const a= ref(&#x27;1&#x27;)</span><br><span class="line">// add 触发后的事件处理函数</span><br><span class="line">const handleAdd = () =&gt; &#123;</span><br><span class="line">  list.value.push(a.value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件只需要对父组件传递的值进行渲染即可，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul &gt;</span><br><span class="line">    &lt;li v-for=&quot;i in props.list&quot; :key=&quot;i&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineProps &#125; from &#x27;vue&#x27;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  list: &#123;</span><br><span class="line">    type: Array,</span><br><span class="line">    default: () =&gt; [],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Emit传值"><a href="#Emit传值" class="headerlink" title="Emit传值"></a>Emit传值</h2><p>emit方式也是Vue中最常见的组件通信方式，该方式用于子传父；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div &gt;</span><br><span class="line">    &lt;input v-model=&quot;value&quot; type=&quot;text&quot; placeholder=&quot;请输入&quot;/&gt;</span><br><span class="line">    &lt;button @click=&quot;handleSubmit&quot; type=&quot;button&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, defineEmits &#125; from &#x27;vue&#x27;</span><br><span class="line">const a= ref(&#x27;1&#x27;)</span><br><span class="line">const emits = defineEmits([&#x27;add&#x27;])</span><br><span class="line">const handleSubmit = () =&gt; &#123;</span><br><span class="line">  emits(&#x27;add&#x27;, a.value)</span><br><span class="line">  a.value = &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;i in list&quot; :key=&quot;i&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;child-components @add=&quot;handleAdd&quot;&gt;&lt;/child-components&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import ChildComponents from &#x27;./child.vue&#x27;</span><br><span class="line">const list = ref([&#x27;JavaScript&#x27;, &#x27;HTML&#x27;, &#x27;CSS&#x27;])</span><br><span class="line">// add 触发后的事件处理函数</span><br><span class="line">const handleAdd = value =&gt; &#123;</span><br><span class="line">  list.value.push(value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="provide-x2F-inject"><a href="#provide-x2F-inject" class="headerlink" title="provide&#x2F;inject"></a>provide&#x2F;inject</h2><p>provide和inject是Vue中提供的一对API，该API可以实现父组件向子组件传递数据，无论层级有多深，都可以通过这对API实现。示例代码如下所示：<br>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 子组件 --&gt;</span><br><span class="line">  &lt;child-components&gt;&lt;/child-components&gt;</span><br><span class="line">  &lt;!-- 父组件 --&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;input v-model=&quot;value&quot; placeholder=&quot;请输入&quot;/&gt;</span><br><span class="line">   &lt;button @click=&quot;handleAdd&quot; type=&quot;button&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, provide &#125; from &#x27;vue&#x27;</span><br><span class="line">import ChildComponents from &#x27;./child.vue&#x27;</span><br><span class="line">const list = ref([&#x27;JavaScript&#x27;, &#x27;HTML&#x27;, &#x27;CSS&#x27;])</span><br><span class="line">const a= ref(&#x27;&#x27;)</span><br><span class="line">// 向子组件提供数据</span><br><span class="line">provide(&#x27;list&#x27;, list.value)</span><br><span class="line">// add 触发后的事件处理函数</span><br><span class="line">const handleAdd = () =&gt; &#123;</span><br><span class="line">  list.value.push(a.value)</span><br><span class="line">  a.value = &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul &gt;</span><br><span class="line">    &lt;li v-for=&quot;i in list&quot; :key=&quot;i&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;</span><br><span class="line">// 接受父组件提供的数据</span><br><span class="line">const list = inject(&#x27;list&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用provide进行数据传递时，尽量readonly进行数据包装，避免子组件修改父级传递过去的数据。</p><h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><p>在使用选项式API时，我们可以通过this.$refs.name的方式获取指定元素或者组件，但是组合式API中就无法使用哪种方式获取。如果我们想要通过ref的方式获取组件或者元素，需要定义一个同名的Ref对象，在组件挂载后就可以访问了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;i in childRefs?.list&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">      &#123;&#123; i &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;!-- 子组件 ref的值与&lt;script&gt;中的保持一致 --&gt;</span><br><span class="line">  &lt;child-components ref=&quot;childRefs&quot;&gt;&lt;/child-components&gt;</span><br><span class="line">  &lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import ChildComponents from &#x27;./child.vue&#x27;</span><br><span class="line">const childRefs = ref(null)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;input v-model=&quot;value&quot; placeholder=&quot;请输入&quot;/&gt;</span><br><span class="line">   &lt;button @click=&quot;handleAdd&quot; type=&quot;button&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, defineExpose &#125; from &#x27;vue&#x27;</span><br><span class="line">const list = ref([&#x27;JavaScript&#x27;, &#x27;HTML&#x27;, &#x27;CSS&#x27;])</span><br><span class="line">const a= ref(&#x27;1&#x27;)</span><br><span class="line">// add 触发后的事件处理函数</span><br><span class="line">const handleAdd = () =&gt; &#123;</span><br><span class="line">  list.value.push(a.value)</span><br><span class="line">  a.value = &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">defineExpose(&#123; list &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>this指向</title>
      <link href="/2022/07/11/this%E6%8C%87%E5%90%91/"/>
      <url>/2022/07/11/this%E6%8C%87%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h2 id="this默认绑定"><a href="#this默认绑定" class="headerlink" title="this默认绑定"></a>this默认绑定</h2><hr><h3 id="web环境下的this指向window"><a href="#web环境下的this指向window" class="headerlink" title="web环境下的this指向window"></a>web环境下的this指向window</h3><p><code>console.log(this) //window</code></p><h3 id="函数独立调用"><a href="#函数独立调用" class="headerlink" title="函数独立调用"></a>函数独立调用</h3><p>非严格模式下，函数内部的this指向window<br>严格模式下，为undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// window</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="闭包中this一般指向window"><a href="#闭包中this一般指向window" class="headerlink" title="闭包中this一般指向window"></a>闭包中this一般指向window</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">     <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   obj.<span class="title function_">fn</span>()();</span><br></pre></td></tr></table></figure><h3 id="事件绑定中的this"><a href="#事件绑定中的this" class="headerlink" title="事件绑定中的this"></a>事件绑定中的this</h3><p>给dom元素的某个事件行为绑定方法，当时间触发方法执行，方法中的this就是当前dom元素本身</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="普通函数执行中的this"><a href="#普通函数执行中的this" class="headerlink" title="普通函数执行中的this"></a>普通函数执行中的this</h3><p>1、函数执行，看函数前是否有“点”，有“点”，“点”前面是谁，this就指向谁，如果没有“点”，this就指向window（js严格模式下是undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(); <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> obj=&#123;</span><br><span class="line">      <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fn1</span>:&#123;</span><br><span class="line">        <span class="attr">fn2</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.<span class="title function_">fn</span>(); <span class="comment">//obj</span></span><br><span class="line">    obj.<span class="property">fn1</span>.<span class="title function_">fn2</span>(); <span class="comment">//obj.fn1</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h3><p>箭头函数中没有自己的this，所用到的this都是上下文中的this</p><p>箭头函数可以保留this的指向，因为它本身没有。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"><span class="attr">n</span>: <span class="number">1000</span>,</span><br><span class="line"><span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// this ==&gt; window</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// this 所处上下文中的this =&gt; obj</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><h3 id="基于-call-x2F-apply-x2F-bind-强制改变中的-this"><a href="#基于-call-x2F-apply-x2F-bind-强制改变中的-this" class="headerlink" title="基于 call&#x2F;apply&#x2F;bind 强制改变中的 this"></a>基于 call&#x2F;apply&#x2F;bind 强制改变中的 this</h3><p>call&#x2F;apply&#x2F;bind 都可以强制改变this的指向</p><p>1、call和apply 都是立即执行函数，并且改变函数中的this，再并且给函数传递参数</p><p>call执行的函数，如果有参数，则以“,”方式一个个去添加<br>apply执行的函数，如果有参数，则以数组的方式来传递</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> o=&#123;<span class="attr">a</span>:<span class="number">100</span>&#125;;</span><br><span class="line"></span><br><span class="line">fn.<span class="title function_">call</span>(o,<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">//call</span></span><br><span class="line">fn.<span class="title function_">apply</span>(o,[<span class="number">1</span>,<span class="number">2</span>]);<span class="comment">//apply</span></span><br></pre></td></tr></table></figure><p><em><strong>注意</strong></em>：在非严格模式下，第一个参数不传入或传入null或传入undefined，this都改变为window；严格模式下，不传是undefined，否则传入谁，this就改为谁<br>call和apply方法执行步骤（原理）<br>-&gt;先给参数1添加一个属性并且让这个属性值赋值为 fn<br>-&gt;执行自定义属性方法<br>-&gt;删除刚添加的自定义属性方法</p><p>bind并不会把函数立即执行，它是预先处理函数中的this和参数的<br>-&gt;bind绑定的函数有参数，和call中的参数传递一样<br>-&gt;bind方法在react中大量使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#box&#x27;</span>).<span class="property">onclick</span> = fn.<span class="title function_">bind</span>(obj,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VUE3基本知识</title>
      <link href="/2022/07/11/v3/"/>
      <url>/2022/07/11/v3/</url>
      
        <content type="html"><![CDATA[<h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><hr><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>和vue2一样是使用Mustache语法实现  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;data&#125;&#125;&lt;/div&gt;  </span><br></pre></td></tr></table></figure><h3 id="原生javaScript表达式"><a href="#原生javaScript表达式" class="headerlink" title="原生javaScript表达式"></a>原生javaScript表达式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;ok? &quot;yes&quot;:&#x27;No&#x27;&#125;&#125;&lt;/div&gt;  </span><br><span class="line">&lt;div&gt;&#123;&#123;data+1&#125;&#125;&lt;/div&gt;  </span><br></pre></td></tr></table></figure><p>条件渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if=&quot;true&quot;&gt;hello word&lt;/div&gt;  </span><br><span class="line">&lt;div v-if=&quot;flag&quot;&gt;hello word&lt;/div&gt;  </span><br><span class="line">&lt;div v-show=&quot;true&quot;&gt;hello word&lt;/div&gt;  </span><br><span class="line">&lt;div v-show=&quot;flag&quot;&gt;hello word&lt;/div&gt;  </span><br></pre></td></tr></table></figure><p>这里的变量<code>flag</code>如果是true，就显示，为false就消失<br>但是<code>v-if</code>和<code>v-show</code>的区别还是和vue2一样的<br><code>v-show</code>是让改变元素的<code>display</code>属性值<br><code>v-if</code>是让直接让元素在DOM节点上直接被删除，类似于removeAttribute  </p><h2 id="Vue3组件注册"><a href="#Vue3组件注册" class="headerlink" title="Vue3组件注册"></a>Vue3组件注册</h2><hr><p>####这些组件是全局注册的。也就是说它们在注册之后可以用在任何新创建的组件实例的模板中。    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;...&#125;).<span class="title function_">component</span>(<span class="string">&#x27;my-component-name&#x27;</span>, &#123;  </span><br><span class="line">  <span class="comment">// ... 选项 ...  </span></span><br><span class="line">&#125;)  </span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js  </span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;component-a&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">###模块化组件：导出组件 再导入组件 在使用   </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">JavaScript</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ComponentA</span> <span class="keyword">from</span> <span class="string">&#x27;./ComponentA&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">ComponentA</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Provide-x2F-Inject"><a href="#Provide-x2F-Inject" class="headerlink" title="Provide&#x2F;Inject"></a>Provide&#x2F;Inject</h2><hr><p>provide&#x2F;inject 是 Vue 在 2.2.0 版本新增的 API，官网这段定义看起来好像有点难理解，通俗的讲，就是 provide 可以在祖先组件中指定我们想要提供给后代组件的数据或方法，而在任何后代组件中，我们都可以使用 inject 来接收 provide 提供的数据或方法。<br><img src="/img/vue3provide&inject.png" alt="代码详解"><br>下面是运行结果<br><img src="/img/provide&inject%E7%BB%93%E6%9E%9C.png" alt="代码详解"><br>在这里我们可以发现孙组件越过子组件接收了父组件注入的数据，我们可以理解为爷爷越过爸爸偷偷给孙子买了冰激凌，这是一组最简单的用法，当层级继续增加时，仍可通过这种方式由父组件直接跨域多个层级向后代组件注入数据。<br>有一点需要特别注意的是，实际上我们可以将当前组件inject获取的数据直接赋值给它本身的data或props，不过官网提示我们，这是在Vue2.2.1版本才实现的功能，在这之前，必须先进行props和data数据的初始化。  </p><p><em><strong>提示</strong></em>：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的 property 还是可响应的。 也就是指，我们需要人为的将这组数据关系变成可响应的，哦，我们之前的foo是一个字符串，基本数据类型是不具有响应特性的，那么，我们可能需要传递一个对象。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VUE3基本知识</title>
      <link href="/2022/07/11/v3%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/07/11/v3%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><hr><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>它有两个参数<code>props</code>和<code>context</code></p><h4 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h4><p><code>setup</code> 函数中的第一个参数是 <code>props</code>。正如在一个标准组件中所期望的那样，<code>setup</code> 函数中的 <code>props</code> 是响应式的，当传入新的 <code>prop</code> 时，它将被更新。<br>但是如果需要<em><strong>解构</strong></em> 时候 需要<code>toRefs</code>函数拉做操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">title</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解构语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; title &#125; = <span class="title function_">toRefs</span>(props)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(title.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><p>传递给 <code>setup</code> 函数的第二个参数是 <code>context</code>。<code>context</code>是一个普通 JavaScript 对象，暴露了其它可能在 <code>setup</code> 中有用的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">    <span class="comment">// Attribute (非响应式对象，等同于 $attrs)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">attrs</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插槽 (非响应式对象，等同于 $slots)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">slots</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发事件 (方法，等同于 $emit)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">emit</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露公共 property (函数)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">expose</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>context</code> 是一个普通的 JavaScript 对象，也就是说，它不是响应式的，这意味着你可以安全地对 <code>context</code> 使用 ES6 解构。<br>vue3中没this这个vue实例，可以用<code>context</code>来取代，<code>context</code>也叫上下文对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; attrs, slots, emit, expose &#125;</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>Vue3的生命周期相对Vue2的来说，少了<code>BeforeCreate</code> 和 <code>Created</code> 两个钩子函数！因为 <code>setup</code> 是围绕 <code>beforeCreate</code> 和 <code>created</code> 生命周期钩子运行的，所以不需要显式地定义它们。换句话说，在这些钩子中编写的任何代码都应该直接在 <code>setup</code> 函数中编写。<br>你可以通过在生命周期钩子前面加上 “on” 来访问组件的生命周期钩子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// mounted</span></span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Component is mounted!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><p>vue3中template模板中不需要在放跟标签<br>定义一个响应式数据需要加<code>ref</code><br>.数据或者方法需要<code>return</code>抛出，模板中才可以使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;subhander&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increhander&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">             &#123;&#123; item &#125;&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="title function_">ref</span>(<span class="number">0</span>) <span class="comment">//ref是用来把普通数据变为响应式  0是count的值</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="title function_">ref</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">subhander</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        count.<span class="property">value</span>-- <span class="comment">//把响应式数据-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// +1</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">increhander</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        count.<span class="property">value</span>++ <span class="comment">//把响应式数据+1</span></span><br><span class="line">        str.<span class="property">value</span> = <span class="string">&#x27;qianfeng&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        count,</span><br><span class="line">        str,</span><br><span class="line">        arr,</span><br><span class="line">        subhander,</span><br><span class="line">        increhander</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; doblue &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;p&gt;&#123;&#123; doblue &#125;&#125;&lt;/p&gt; --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;doblue2&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increHander&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// computed虽然是函数，本质是数据变量，特性：缓存性，依赖性</span></span><br><span class="line">    <span class="comment">// 计算属性有函数形式和对象形式，这个函数形式</span></span><br><span class="line">    <span class="keyword">var</span> doblue = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行一次&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> num.<span class="property">value</span> * <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 计算属性的对象形式</span></span><br><span class="line">    <span class="keyword">var</span> doblue2 = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123; <span class="keyword">return</span> num.<span class="property">value</span> * <span class="number">2</span>&#125;, <span class="comment">//依赖性</span></span><br><span class="line">        <span class="title function_">set</span>(<span class="params">val</span>)&#123; num.<span class="property">value</span> = val &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">increHander</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        num.<span class="property">value</span>++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        num,</span><br><span class="line">        doblue,</span><br><span class="line">        doblue2,</span><br><span class="line">        increHander</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; arr &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handerclick&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span><br><span class="line"><span class="comment">// 1.reactive+toRefs可以创建响应式对象</span></span><br><span class="line"><span class="comment">// 2.新版本中toRefs是可以省略的，但是还有缺陷。</span></span><br><span class="line"><span class="comment">// 这两个是一起配合使用的</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// props data computed都是数据变量，不能重复，重复就覆盖。</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="title function_">reactive</span>(&#123; <span class="comment">//reactive创建一个响应式的对象，每个属性都是响应式的</span></span><br><span class="line">        <span class="attr">num</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">str</span>:<span class="string">&#x27;aaaa&#x27;</span>,</span><br><span class="line">        <span class="attr">arr</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        <span class="attr">obj</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> data1 = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">num</span>:<span class="number">100</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>,data);</span><br><span class="line">    data.<span class="property">age</span> = <span class="number">22</span></span><br><span class="line">    data.<span class="property">arr</span>[<span class="number">0</span>] = <span class="number">9</span> <span class="comment">//在vue2也是无法被监听的，vue3是可以的</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">handerclick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        data.<span class="property">num</span>++  <span class="comment">//data是响应式对象，获取属性值即可，不用加value</span></span><br><span class="line">        data.<span class="property">str</span> = <span class="string">&#x27;bbbb&#x27;</span></span><br><span class="line">        data.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line">        data.<span class="property">obj</span>.<span class="property">name</span> = <span class="string">&#x27;小红&#x27;</span></span><br><span class="line">        <span class="comment">// vue2 bug无法监听属性的添加和删除,必须在data中先初始化才可以监听响应式，vue3没事。</span></span><br><span class="line">        <span class="comment">// vue3是的响应式是proxy代理重写的。</span></span><br><span class="line">        data.<span class="property">age</span> +=<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> refData = <span class="title function_">toRefs</span>(data) <span class="comment">//toRefs把响应式对象变成普通的对象</span></span><br><span class="line">    <span class="keyword">var</span> refData1 = <span class="title function_">toRefs</span>(data1) <span class="comment">//toRefs把响应式对象变成普通的对象</span></span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        ...refData,</span><br><span class="line">        ...refData1,</span><br><span class="line">        handerclick</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="provide-amp-amp-inject"><a href="#provide-amp-amp-inject" class="headerlink" title="provide &amp;&amp; inject"></a>provide &amp;&amp; inject</h3><p>vue2中父组件更新，如果是基本数据类型，后代组件不更新，如果是对象，后代会更新。<br>vue3中父组件更新，后代无条件更新，不管是不是引用数据类型。</p><p>下面是父组件的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handerclick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Child2</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Child2</span> <span class="keyword">from</span> <span class="string">&#x27;./Child2.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref,provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="title class_">Child2</span></span><br><span class="line"> &#125;,   </span><br><span class="line"> <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="title function_">ref</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="title function_">ref</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;num&#x27;</span>,num) <span class="comment">//provide把我们的值传递给后代即可。</span></span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;obj&#x27;</span>,obj) <span class="comment">//provide把我们的值传递给后代即可。</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">handerclick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        num.<span class="property">value</span>++</span><br><span class="line">        obj.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&#x27;小红&#x27;</span> <span class="comment">//对象更新</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        handerclick</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是子组件的内容<br><code>inject</code> 和 <code>props</code>是一样的，数据只读。不能直接修改他。单项数据流</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   子组件</span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; munum &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; myobj.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> munum = <span class="title function_">inject</span>(<span class="string">&#x27;num&#x27;</span>) <span class="comment">//injet(key) 可以获取祖先组件传递的数据</span></span><br><span class="line">    <span class="keyword">var</span> myobj = <span class="title function_">inject</span>(<span class="string">&#x27;obj&#x27;</span>) <span class="comment">//injet(key) 可以获取祖先组件传递的数据</span></span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        munum,</span><br><span class="line">        myobj</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML5布局</title>
      <link href="/2022/07/07/H5/"/>
      <url>/2022/07/07/H5/</url>
      
        <content type="html"><![CDATA[<h1 id="弹性布局"><a href="#弹性布局" class="headerlink" title="###弹性布局"></a>###弹性布局</h1>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
