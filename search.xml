<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VUE3传值</title>
      <link href="/2022/07/11/V3%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
      <url>/2022/07/11/V3%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="Props传值"><a href="#Props传值" class="headerlink" title="Props传值"></a>Props传值</h2><p>Props方式是Vue中最常见的一种父传子的一种方式<br>父组件代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;child-components :list=&quot;list&quot;&gt;&lt;/child-components&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input v-model=&quot;value&quot; type=&quot;text&quot; placeholder=&quot;请输入&quot;/&gt;</span><br><span class="line">    &lt;button @click=&quot;handleAdd&quot; type=&quot;button&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import ChildComponents from &#x27;./child.vue&#x27;</span><br><span class="line">const list = ref([&#x27;JavaScript&#x27;, &#x27;HTML&#x27;, &#x27;CSS&#x27;])</span><br><span class="line">const a= ref(&#x27;1&#x27;)</span><br><span class="line">// add 触发后的事件处理函数</span><br><span class="line">const handleAdd = () =&gt; &#123;</span><br><span class="line">  list.value.push(a.value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件只需要对父组件传递的值进行渲染即可，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul &gt;</span><br><span class="line">    &lt;li v-for=&quot;i in props.list&quot; :key=&quot;i&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineProps &#125; from &#x27;vue&#x27;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  list: &#123;</span><br><span class="line">    type: Array,</span><br><span class="line">    default: () =&gt; [],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Emit传值"><a href="#Emit传值" class="headerlink" title="Emit传值"></a>Emit传值</h2><p>emit方式也是Vue中最常见的组件通信方式，该方式用于子传父；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div &gt;</span><br><span class="line">    &lt;input v-model=&quot;value&quot; type=&quot;text&quot; placeholder=&quot;请输入&quot;/&gt;</span><br><span class="line">    &lt;button @click=&quot;handleSubmit&quot; type=&quot;button&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, defineEmits &#125; from &#x27;vue&#x27;</span><br><span class="line">const a= ref(&#x27;1&#x27;)</span><br><span class="line">const emits = defineEmits([&#x27;add&#x27;])</span><br><span class="line">const handleSubmit = () =&gt; &#123;</span><br><span class="line">  emits(&#x27;add&#x27;, a.value)</span><br><span class="line">  a.value = &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;i in list&quot; :key=&quot;i&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;child-components @add=&quot;handleAdd&quot;&gt;&lt;/child-components&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import ChildComponents from &#x27;./child.vue&#x27;</span><br><span class="line">const list = ref([&#x27;JavaScript&#x27;, &#x27;HTML&#x27;, &#x27;CSS&#x27;])</span><br><span class="line">// add 触发后的事件处理函数</span><br><span class="line">const handleAdd = value =&gt; &#123;</span><br><span class="line">  list.value.push(value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="provide-x2F-inject"><a href="#provide-x2F-inject" class="headerlink" title="provide&#x2F;inject"></a>provide&#x2F;inject</h2><p>provide和inject是Vue中提供的一对API，该API可以实现父组件向子组件传递数据，无论层级有多深，都可以通过这对API实现。示例代码如下所示：<br>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 子组件 --&gt;</span><br><span class="line">  &lt;child-components&gt;&lt;/child-components&gt;</span><br><span class="line">  &lt;!-- 父组件 --&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;input v-model=&quot;value&quot; placeholder=&quot;请输入&quot;/&gt;</span><br><span class="line">   &lt;button @click=&quot;handleAdd&quot; type=&quot;button&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, provide &#125; from &#x27;vue&#x27;</span><br><span class="line">import ChildComponents from &#x27;./child.vue&#x27;</span><br><span class="line">const list = ref([&#x27;JavaScript&#x27;, &#x27;HTML&#x27;, &#x27;CSS&#x27;])</span><br><span class="line">const a= ref(&#x27;&#x27;)</span><br><span class="line">// 向子组件提供数据</span><br><span class="line">provide(&#x27;list&#x27;, list.value)</span><br><span class="line">// add 触发后的事件处理函数</span><br><span class="line">const handleAdd = () =&gt; &#123;</span><br><span class="line">  list.value.push(a.value)</span><br><span class="line">  a.value = &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul &gt;</span><br><span class="line">    &lt;li v-for=&quot;i in list&quot; :key=&quot;i&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;</span><br><span class="line">// 接受父组件提供的数据</span><br><span class="line">const list = inject(&#x27;list&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用provide进行数据传递时，尽量readonly进行数据包装，避免子组件修改父级传递过去的数据。</p><h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><p>在使用选项式API时，我们可以通过this.$refs.name的方式获取指定元素或者组件，但是组合式API中就无法使用哪种方式获取。如果我们想要通过ref的方式获取组件或者元素，需要定义一个同名的Ref对象，在组件挂载后就可以访问了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;i in childRefs?.list&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">      &#123;&#123; i &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;!-- 子组件 ref的值与&lt;script&gt;中的保持一致 --&gt;</span><br><span class="line">  &lt;child-components ref=&quot;childRefs&quot;&gt;&lt;/child-components&gt;</span><br><span class="line">  &lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import ChildComponents from &#x27;./child.vue&#x27;</span><br><span class="line">const childRefs = ref(null)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;input v-model=&quot;value&quot; placeholder=&quot;请输入&quot;/&gt;</span><br><span class="line">   &lt;button @click=&quot;handleAdd&quot; type=&quot;button&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, defineExpose &#125; from &#x27;vue&#x27;</span><br><span class="line">const list = ref([&#x27;JavaScript&#x27;, &#x27;HTML&#x27;, &#x27;CSS&#x27;])</span><br><span class="line">const a= ref(&#x27;1&#x27;)</span><br><span class="line">// add 触发后的事件处理函数</span><br><span class="line">const handleAdd = () =&gt; &#123;</span><br><span class="line">  list.value.push(a.value)</span><br><span class="line">  a.value = &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">defineExpose(&#123; list &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VUE3基本知识</title>
      <link href="/2022/07/11/v3/"/>
      <url>/2022/07/11/v3/</url>
      
        <content type="html"><![CDATA[<h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><hr><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>和vue2一样是使用Mustache语法实现  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;data&#125;&#125;&lt;/div&gt;  </span><br></pre></td></tr></table></figure><h3 id="原生javaScript表达式"><a href="#原生javaScript表达式" class="headerlink" title="原生javaScript表达式"></a>原生javaScript表达式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;ok? &quot;yes&quot;:&#x27;No&#x27;&#125;&#125;&lt;/div&gt;  </span><br><span class="line">&lt;div&gt;&#123;&#123;data+1&#125;&#125;&lt;/div&gt;  </span><br></pre></td></tr></table></figure><p>条件渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if=&quot;true&quot;&gt;hello word&lt;/div&gt;  </span><br><span class="line">&lt;div v-if=&quot;flag&quot;&gt;hello word&lt;/div&gt;  </span><br><span class="line">&lt;div v-show=&quot;true&quot;&gt;hello word&lt;/div&gt;  </span><br><span class="line">&lt;div v-show=&quot;flag&quot;&gt;hello word&lt;/div&gt;  </span><br></pre></td></tr></table></figure><p>这里的变量<code>flag</code>如果是true，就显示，为false就消失<br>但是<code>v-if</code>和<code>v-show</code>的区别还是和vue2一样的<br><code>v-show</code>是让改变元素的<code>display</code>属性值<br><code>v-if</code>是让直接让元素在DOM节点上直接被删除，类似于removeAttribute  </p><h2 id="Vue3组件注册"><a href="#Vue3组件注册" class="headerlink" title="Vue3组件注册"></a>Vue3组件注册</h2><hr><p>####这些组件是全局注册的。也就是说它们在注册之后可以用在任何新创建的组件实例的模板中。    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;...&#125;).<span class="title function_">component</span>(<span class="string">&#x27;my-component-name&#x27;</span>, &#123;  </span><br><span class="line">  <span class="comment">// ... 选项 ...  </span></span><br><span class="line">&#125;)  </span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js  </span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;component-a&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">###模块化组件：导出组件 再导入组件 在使用   </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">JavaScript</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ComponentA</span> <span class="keyword">from</span> <span class="string">&#x27;./ComponentA&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">ComponentA</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Provide-x2F-Inject"><a href="#Provide-x2F-Inject" class="headerlink" title="Provide&#x2F;Inject"></a>Provide&#x2F;Inject</h2><hr><p>provide&#x2F;inject 是 Vue 在 2.2.0 版本新增的 API，官网这段定义看起来好像有点难理解，通俗的讲，就是 provide 可以在祖先组件中指定我们想要提供给后代组件的数据或方法，而在任何后代组件中，我们都可以使用 inject 来接收 provide 提供的数据或方法。<br><img src="/img/vue3provide&inject.png" alt="代码详解"><br>下面是运行结果<br><img src="/img/provide&inject%E7%BB%93%E6%9E%9C.png" alt="代码详解"><br>在这里我们可以发现孙组件越过子组件接收了父组件注入的数据，我们可以理解为爷爷越过爸爸偷偷给孙子买了冰激凌，这是一组最简单的用法，当层级继续增加时，仍可通过这种方式由父组件直接跨域多个层级向后代组件注入数据。<br>有一点需要特别注意的是，实际上我们可以将当前组件inject获取的数据直接赋值给它本身的data或props，不过官网提示我们，这是在Vue2.2.1版本才实现的功能，在这之前，必须先进行props和data数据的初始化。  </p><p><em><strong>提示</strong></em>：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的 property 还是可响应的。 也就是指，我们需要人为的将这组数据关系变成可响应的，哦，我们之前的foo是一个字符串，基本数据类型是不具有响应特性的，那么，我们可能需要传递一个对象。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VUE3基本知识</title>
      <link href="/2022/07/11/v3%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/07/11/v3%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><hr><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>它有两个参数<code>props</code>和<code>context</code></p><h4 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h4><p><code>setup</code> 函数中的第一个参数是 <code>props</code>。正如在一个标准组件中所期望的那样，<code>setup</code> 函数中的 <code>props</code> 是响应式的，当传入新的 <code>prop</code> 时，它将被更新。<br>但是如果需要<em><strong>解构</strong></em> 时候 需要<code>toRefs</code>函数拉做操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">title</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解构语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; title &#125; = <span class="title function_">toRefs</span>(props)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(title.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><p>传递给 <code>setup</code> 函数的第二个参数是 <code>context</code>。<code>context</code>是一个普通 JavaScript 对象，暴露了其它可能在 <code>setup</code> 中有用的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">    <span class="comment">// Attribute (非响应式对象，等同于 $attrs)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">attrs</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插槽 (非响应式对象，等同于 $slots)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">slots</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发事件 (方法，等同于 $emit)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">emit</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露公共 property (函数)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">expose</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>context</code> 是一个普通的 JavaScript 对象，也就是说，它不是响应式的，这意味着你可以安全地对 <code>context</code> 使用 ES6 解构。<br>vue3中没this这个vue实例，可以用<code>context</code>来取代，<code>context</code>也叫上下文对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; attrs, slots, emit, expose &#125;</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>Vue3的生命周期相对Vue2的来说，少了<code>BeforeCreate</code> 和 <code>Created</code> 两个钩子函数！因为 <code>setup</code> 是围绕 <code>beforeCreate</code> 和 <code>created</code> 生命周期钩子运行的，所以不需要显式地定义它们。换句话说，在这些钩子中编写的任何代码都应该直接在 <code>setup</code> 函数中编写。<br>你可以通过在生命周期钩子前面加上 “on” 来访问组件的生命周期钩子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// mounted</span></span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Component is mounted!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><p>vue3中template模板中不需要在放跟标签<br>定义一个响应式数据需要加<code>ref</code><br>.数据或者方法需要<code>return</code>抛出，模板中才可以使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;subhander&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increhander&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">             &#123;&#123; item &#125;&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="title function_">ref</span>(<span class="number">0</span>) <span class="comment">//ref是用来把普通数据变为响应式  0是count的值</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="title function_">ref</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">subhander</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        count.<span class="property">value</span>-- <span class="comment">//把响应式数据-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// +1</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">increhander</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        count.<span class="property">value</span>++ <span class="comment">//把响应式数据+1</span></span><br><span class="line">        str.<span class="property">value</span> = <span class="string">&#x27;qianfeng&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        count,</span><br><span class="line">        str,</span><br><span class="line">        arr,</span><br><span class="line">        subhander,</span><br><span class="line">        increhander</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; doblue &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;p&gt;&#123;&#123; doblue &#125;&#125;&lt;/p&gt; --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;doblue2&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increHander&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// computed虽然是函数，本质是数据变量，特性：缓存性，依赖性</span></span><br><span class="line">    <span class="comment">// 计算属性有函数形式和对象形式，这个函数形式</span></span><br><span class="line">    <span class="keyword">var</span> doblue = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行一次&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> num.<span class="property">value</span> * <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 计算属性的对象形式</span></span><br><span class="line">    <span class="keyword">var</span> doblue2 = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123; <span class="keyword">return</span> num.<span class="property">value</span> * <span class="number">2</span>&#125;, <span class="comment">//依赖性</span></span><br><span class="line">        <span class="title function_">set</span>(<span class="params">val</span>)&#123; num.<span class="property">value</span> = val &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">increHander</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        num.<span class="property">value</span>++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        num,</span><br><span class="line">        doblue,</span><br><span class="line">        doblue2,</span><br><span class="line">        increHander</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; arr &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handerclick&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span><br><span class="line"><span class="comment">// 1.reactive+toRefs可以创建响应式对象</span></span><br><span class="line"><span class="comment">// 2.新版本中toRefs是可以省略的，但是还有缺陷。</span></span><br><span class="line"><span class="comment">// 这两个是一起配合使用的</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// props data computed都是数据变量，不能重复，重复就覆盖。</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="title function_">reactive</span>(&#123; <span class="comment">//reactive创建一个响应式的对象，每个属性都是响应式的</span></span><br><span class="line">        <span class="attr">num</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">str</span>:<span class="string">&#x27;aaaa&#x27;</span>,</span><br><span class="line">        <span class="attr">arr</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        <span class="attr">obj</span>:&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> data1 = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">num</span>:<span class="number">100</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>,data);</span><br><span class="line">    data.<span class="property">age</span> = <span class="number">22</span></span><br><span class="line">    data.<span class="property">arr</span>[<span class="number">0</span>] = <span class="number">9</span> <span class="comment">//在vue2也是无法被监听的，vue3是可以的</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">handerclick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        data.<span class="property">num</span>++  <span class="comment">//data是响应式对象，获取属性值即可，不用加value</span></span><br><span class="line">        data.<span class="property">str</span> = <span class="string">&#x27;bbbb&#x27;</span></span><br><span class="line">        data.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line">        data.<span class="property">obj</span>.<span class="property">name</span> = <span class="string">&#x27;小红&#x27;</span></span><br><span class="line">        <span class="comment">// vue2 bug无法监听属性的添加和删除,必须在data中先初始化才可以监听响应式，vue3没事。</span></span><br><span class="line">        <span class="comment">// vue3是的响应式是proxy代理重写的。</span></span><br><span class="line">        data.<span class="property">age</span> +=<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> refData = <span class="title function_">toRefs</span>(data) <span class="comment">//toRefs把响应式对象变成普通的对象</span></span><br><span class="line">    <span class="keyword">var</span> refData1 = <span class="title function_">toRefs</span>(data1) <span class="comment">//toRefs把响应式对象变成普通的对象</span></span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        ...refData,</span><br><span class="line">        ...refData1,</span><br><span class="line">        handerclick</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="provide-amp-amp-inject"><a href="#provide-amp-amp-inject" class="headerlink" title="provide &amp;&amp; inject"></a>provide &amp;&amp; inject</h3><p>vue2中父组件更新，如果是基本数据类型，后代组件不更新，如果是对象，后代会更新。<br>vue3中父组件更新，后代无条件更新，不管是不是引用数据类型。</p><p>下面是父组件的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handerclick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Child2</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Child2</span> <span class="keyword">from</span> <span class="string">&#x27;./Child2.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref,provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="attr">components</span>:&#123;</span><br><span class="line">    <span class="title class_">Child2</span></span><br><span class="line"> &#125;,   </span><br><span class="line"> <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="title function_">ref</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="title function_">ref</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;num&#x27;</span>,num) <span class="comment">//provide把我们的值传递给后代即可。</span></span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;obj&#x27;</span>,obj) <span class="comment">//provide把我们的值传递给后代即可。</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">handerclick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        num.<span class="property">value</span>++</span><br><span class="line">        obj.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&#x27;小红&#x27;</span> <span class="comment">//对象更新</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        handerclick</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是子组件的内容<br><code>inject</code> 和 <code>props</code>是一样的，数据只读。不能直接修改他。单项数据流</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   子组件</span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; munum &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; myobj.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> munum = <span class="title function_">inject</span>(<span class="string">&#x27;num&#x27;</span>) <span class="comment">//injet(key) 可以获取祖先组件传递的数据</span></span><br><span class="line">    <span class="keyword">var</span> myobj = <span class="title function_">inject</span>(<span class="string">&#x27;obj&#x27;</span>) <span class="comment">//injet(key) 可以获取祖先组件传递的数据</span></span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        munum,</span><br><span class="line">        myobj</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML5布局</title>
      <link href="/2022/07/07/H5/"/>
      <url>/2022/07/07/H5/</url>
      
        <content type="html"><![CDATA[<h1 id="弹性布局"><a href="#弹性布局" class="headerlink" title="###弹性布局"></a>###弹性布局</h1>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
