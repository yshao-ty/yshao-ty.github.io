<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VUE3基本知识</title>
      <link href="/2022/07/11/v3/"/>
      <url>/2022/07/11/v3/</url>
      
        <content type="html"><![CDATA[<h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><hr><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>和vue2一样是使用Mustache语法实现  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;data&#125;&#125;&lt;/div&gt;  </span><br><span class="line">  </span><br><span class="line">## 原生javaScript表达式  </span><br><span class="line">===========  </span><br><span class="line">```HTML5  </span><br><span class="line">&lt;div&gt;&#123;&#123;ok? &quot;yes&quot;:&#x27;No&#x27;&#125;&#125;&lt;/div&gt;  </span><br><span class="line">&lt;div&gt;&#123;&#123;data+1&#125;&#125;&lt;/div&gt;  </span><br></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if=&quot;true&quot;&gt;hello word&lt;/div&gt;  </span><br><span class="line">&lt;div v-if=&quot;flag&quot;&gt;hello word&lt;/div&gt;  </span><br><span class="line">&lt;div v-show=&quot;true&quot;&gt;hello word&lt;/div&gt;  </span><br><span class="line">&lt;div v-show=&quot;flag&quot;&gt;hello word&lt;/div&gt;  </span><br></pre></td></tr></table></figure><p>这里的变量<code>flag</code>如果是true，就显示，为false就消失<br>但是<code>v-if</code>和<code>v-show</code>的区别还是和vue2一样的<br><code>v-show</code>是让改变元素的<code>display</code>属性值<br><code>v-if</code>是让直接让元素在DOM节点上直接被删除，类似于removeAttribute  </p><h3 id="Vue3组件注册"><a href="#Vue3组件注册" class="headerlink" title="Vue3组件注册"></a>Vue3组件注册</h3><hr><p>#####这些组件是全局注册的。也就是说它们在注册之后可以用在任何新创建的组件实例的模板中。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;...&#125;).<span class="title function_">component</span>(<span class="string">&#x27;my-component-name&#x27;</span>, &#123;  </span><br><span class="line">  <span class="comment">// ... 选项 ...  </span></span><br><span class="line">&#125;)  </span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js  </span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;component-a&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#####模块化组件：导出组件 再导入组件 在使用</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">JavaScript</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ComponentA</span> <span class="keyword">from</span> <span class="string">&#x27;./ComponentA&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">ComponentA</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#####Provide&#x2F;Inject<br>provide&#x2F;inject 是 Vue 在 2.2.0 版本新增的 API，官网这段定义看起来好像有点难理解，通俗的讲，就是 provide 可以在祖先组件中指定我们想要提供给后代组件的数据或方法，而在任何后代组件中，我们都可以使用 inject 来接收 provide 提供的数据或方法。<br><img src="/img/vue3provide&inject.png" alt="代码详解"><br>在这里我们可以发现孙组件越过子组件接收了父组件注入的数据，我们可以理解为爷爷越过爸爸偷偷给孙子买了冰激凌，这是一组最简单的用法，当层级继续增加时，仍可通过这种方式由父组件直接跨域多个层级向后代组件注入数据。<br>有一点需要特别注意的是，实际上我们可以将当前组件inject获取的数据直接赋值给它本身的data或props，不过官网提示我们，这是在Vue2.2.1版本才实现的功能，在这之前，必须先进行props和data数据的初始化。  </p><p><em><strong>提示</strong></em>：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的 property 还是可响应的。 也就是指，我们需要人为的将这组数据关系变成可响应的，哦，我们之前的foo是一个字符串，基本数据类型是不具有响应特性的，那么，我们可能需要传递一个对象。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML5布局</title>
      <link href="/2022/07/07/H5/"/>
      <url>/2022/07/07/H5/</url>
      
        <content type="html"><![CDATA[<h1 id="弹性布局"><a href="#弹性布局" class="headerlink" title="###弹性布局"></a>###弹性布局</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代码演示</title>
      <link href="/2022/07/06/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/"/>
      <url>/2022/07/06/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%BC%94%E7%A4%BA/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
